"""
YouTube Summarizer API - Backend Application
-----------------------------------------
Cette application Flask fournit une API pour r√©sumer et analyser des vid√©os YouTube.
Elle utilise l'API OpenAI GPT-4 pour g√©n√©rer des r√©sum√©s intelligents et d'autres analyses.

Fonctionnalit√©s principales :
- R√©sum√© de vid√©os YouTube
- Navigation horodat√©e avec moments cl√©s
- Transcription am√©lior√©e
- Analyse des commentaires

Auteur: Aymen Messaoudi
Date: Avril 2025
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
from openai import OpenAI
from functools import lru_cache
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import os
import re
from typing import List, Dict, Any, Optional, Tuple
import logging
from datetime import datetime

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Chargement des variables d'environnement
load_dotenv()

# Initialisation de l'application
app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "*"}})

# Configuration du rate limiting
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["100 per day", "10 per minute"],
    enabled=not app.config.get('TESTING', False)  # D√©sactive le rate limiting en mode test
)

# Configuration
PORT = int(os.getenv("PORT", 5000))
MAX_CHARS = 12000
YOUTUBE_ID_REGEX = r'^[a-zA-Z0-9_-]{11}$'
SUPPORTED_LANGUAGES = ['fr', 'en']

# Client OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def validate_video_id(video_id: str) -> bool:
    """Valide le format de l'ID vid√©o YouTube."""
    return bool(re.match(YOUTUBE_ID_REGEX, video_id))

def validate_language(lang: str) -> str:
    """Valide et retourne la langue support√©e."""
    lang = lang.lower()
    return lang if lang in SUPPORTED_LANGUAGES else 'fr'

@lru_cache(maxsize=100)
def get_transcript(video_id: str, target_lang: str = 'fr') -> Tuple[Optional[List[Dict]], str, int]:
    """
    R√©cup√®re la transcription d'une vid√©o YouTube avec mise en cache.
    
    Args:
        video_id (str): L'identifiant de la vid√©o YouTube
        target_lang (str): La langue cible pour la transcription
    
    Returns:
        Tuple[Optional[List[Dict]], str, int]: (transcription, message d'erreur, code HTTP)
    """
    try:
        transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])
        return transcript_list, "", 200
    except NoTranscriptFound:
        try:
            transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=[target_lang])
            return transcript_list, "", 200
        except NoTranscriptFound:
            logger.error(f"Transcription non trouv√©e pour {video_id}")
            return None, f"Aucun sous-titre disponible dans les langues sp√©cifi√©es ({target_lang})", 404
        except TranscriptsDisabled:
            logger.warning(f"Transcription d√©sactiv√©e pour la vid√©o {video_id}")
            return None, "Transcription d√©sactiv√©e pour cette vid√©o", 403
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration de la transcription: {str(e)}")
            return None, str(e), 500
    except TranscriptsDisabled:
        logger.warning(f"Transcription d√©sactiv√©e pour la vid√©o {video_id}")
        return None, "Transcription d√©sactiv√©e pour cette vid√©o", 403
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration de la transcription: {str(e)}")
        return None, str(e), 500

def truncate_text(text: str, max_chars: int = MAX_CHARS) -> str:
    """Tronque le texte √† la limite sp√©cifi√©e."""
    if len(text) > max_chars:
        return text[:max_chars] + "\n\n[Tronqu√© √† cause de la taille maximale]"
    return text

def create_error_response(message: str, status_code: int) -> Tuple[Dict, int]:
    """Cr√©e une r√©ponse d'erreur standardis√©e."""
    return jsonify({
        "error": {
            "message": message,
            "status": status_code
        }
    }), status_code

@app.errorhandler(429)
def ratelimit_handler(e):
    """Gestionnaire pour les erreurs de rate limiting."""
    return create_error_response(
        "Trop de requ√™tes. Veuillez r√©essayer plus tard.",
        429
    )

# Routes API

@app.route('/api/summarize', methods=['POST'])
@limiter.limit("5 per minute")
def summarize():
    """Route principale pour r√©sumer une vid√©o YouTube."""
    try:
        data = request.get_json()
        if not data:
            return create_error_response("Corps de requ√™te JSON requis", 400)

        video_id = data.get("videoId")
        if not video_id:
            return create_error_response("videoId est requis", 400)
        
        if not validate_video_id(video_id):
            return create_error_response("Format d'ID vid√©o YouTube invalide", 400)

        target_lang = validate_language(data.get("targetLang", "fr"))
        
        transcript_list, error_message, status_code = get_transcript(video_id, target_lang)
        if error_message:
            return create_error_response(error_message, status_code)

        transcript_text = " ".join([entry["text"] for entry in transcript_list])
        transcript_text = truncate_text(transcript_text)

        prompt = f"""
        Tu es un assistant intelligent. R√©sume le contenu suivant, qui est une transcription brute d'une vid√©o YouTube.

        Ta mission :
        - R√©sume uniquement en fran√ßais üá´üá∑
        - Formate en **bullet points clairs** avec des titres en gras
        - Pas d'introduction, pas de conclusion, pas de traduction en anglais
        - Garde uniquement les informations utiles
        - Utilise **le style Markdown** :
          - Exemple :
            - **Sujet :** Contenu
            - **Sujet 2 :** Autre contenu

        Voici la transcription :
        {transcript_text}
        """

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "Tu es un assistant de r√©sum√© vid√©o YouTube multilingue."},
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"}
        )
        
        return jsonify({
            "summary": response.choices[0].message.content,
            "metadata": {
                "videoId": video_id,
                "language": target_lang,
                "charCount": len(transcript_text)
            }
        })

    except Exception as e:
        logger.error(f"Erreur lors du r√©sum√©: {str(e)}")
        return create_error_response(f"Erreur lors du traitement: {str(e)}", 500)

@app.route('/api/timestamped-summary', methods=['POST'])
@limiter.limit("5 per minute")
def get_timestamped_summary():
    """Route pour obtenir un r√©sum√© chronologique avec les moments importants."""
    try:
        data = request.get_json()
        if not data:
            return create_error_response("Corps de requ√™te JSON requis", 400)

        video_id = data.get("videoId")
        if not video_id:
            return create_error_response("videoId est requis", 400)
        
        if not validate_video_id(video_id):
            return create_error_response("Format d'ID vid√©o YouTube invalide", 400)

        target_lang = validate_language(data.get("targetLang", "fr"))
        
        transcript_list, error_message, status_code = get_transcript(video_id, target_lang)
        if error_message:
            return create_error_response(error_message, status_code)

        transcript_text = " ".join([entry["text"] for entry in transcript_list])
        transcript_text = truncate_text(transcript_text)

        timestamps = [
            {"time": entry["start"], 
             "text": entry["text"],
             "duration": entry["duration"]} 
            for entry in transcript_list
        ]

        prompt = f"""
        Analyse cette transcription de vid√©o YouTube et identifie les moments cl√©s importants.

        Instructions sp√©cifiques :
        1. Identifie 5-8 moments cl√©s de la vid√©o
        2. Pour chaque moment :
           - Donne un titre descriptif concis en fran√ßais
           - Explique bri√®vement pourquoi ce moment est important
        3. Formate la sortie en JSON avec la structure suivante :
           {{
             "keyMoments": [
               {{
                 "title": "Titre du moment",
                 "description": "Description courte",
                 "importance": "Pourquoi ce moment est important"
               }}
             ]
           }}

        Transcription :
        {transcript_text}
        """

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "Tu es un expert en analyse vid√©o qui identifie les moments cl√©s."},
                {"role": "user", "content": prompt}
            ],
            response_format={ "type": "json_object" }
        )
        
        return jsonify({
            "analysis": response.choices[0].message.content,
            "timestamps": timestamps,
            "metadata": {
                "videoId": video_id,
                "language": target_lang,
                "momentsCount": len(timestamps)
            }
        })

    except Exception as e:
        logger.error(f"Erreur lors de l'analyse chronologique: {str(e)}")
        return create_error_response(f"Erreur lors du traitement: {str(e)}", 500)

@app.route('/api/enhanced-transcript', methods=['POST'])
@limiter.limit("5 per minute")
def get_enhanced_transcript():
    """Route pour obtenir une version am√©lior√©e de la transcription."""
    try:
        data = request.get_json()
        if not data:
            return create_error_response("Corps de requ√™te JSON requis", 400)

        video_id = data.get("videoId")
        if not video_id:
            return create_error_response("videoId est requis", 400)
        
        if not validate_video_id(video_id):
            return create_error_response("Format d'ID vid√©o YouTube invalide", 400)

        target_lang = validate_language(data.get("targetLang", "fr"))
        
        transcript_list, error_message, status_code = get_transcript(video_id, target_lang)
        if error_message:
            return create_error_response(error_message, status_code)

        transcript_text = " ".join([entry["text"] for entry in transcript_list])
        transcript_text = truncate_text(transcript_text)

        prompt = f"""
        Am√©liore cette transcription brute de vid√©o YouTube pour la rendre plus lisible et professionnelle.

        Instructions sp√©cifiques :
        1. Corrige la grammaire et la ponctuation en fran√ßais
        2. Organise le texte en paragraphes logiques
        3. Ajoute des marqueurs de structure (introduction, d√©veloppement, conclusion)
        4. Conserve le sens original mais am√©liore la clart√©
        5. Formate la sortie en JSON avec cette structure :
           {{
             "enhancedTranscript": "Le texte am√©lior√©",
             "sections": ["Liste des sections principales"],
             "readabilityScore": "Score de lisibilit√© sur 10"
           }}

        Transcription originale :
        {transcript_text}
        """

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "Tu es un expert en r√©daction qui am√©liore la qualit√© des transcriptions."},
                {"role": "user", "content": prompt}
            ],
            response_format={ "type": "json_object" }
        )
        
        return jsonify({
            "result": response.choices[0].message.content,
            "metadata": {
                "videoId": video_id,
                "language": target_lang,
                "originalLength": len(transcript_text)
            }
        })

    except Exception as e:
        logger.error(f"Erreur lors de l'am√©lioration de la transcription: {str(e)}")
        return create_error_response(f"Erreur lors du traitement: {str(e)}", 500)

@app.route('/api/top-comments', methods=['POST'])
@limiter.limit("5 per minute")
def analyze_comments():
    """Route pour analyser et g√©n√©rer des commentaires pertinents."""
    try:
        data = request.get_json()
        if not data:
            return create_error_response("Corps de requ√™te JSON requis", 400)

        video_id = data.get("videoId")
        if not video_id:
            return create_error_response("videoId est requis", 400)
        
        if not validate_video_id(video_id):
            return create_error_response("Format d'ID vid√©o YouTube invalide", 400)

        target_lang = validate_language(data.get("targetLang", "fr"))
        
        transcript_list, error_message, status_code = get_transcript(video_id, target_lang)
        if error_message:
            return create_error_response(error_message, status_code)

        transcript_text = " ".join([entry["text"] for entry in transcript_list])
        transcript_text = truncate_text(transcript_text)

        prompt = f"""
        En te basant sur le contenu de cette vid√©o, g√©n√®re et analyse des commentaires pertinents.

        Instructions sp√©cifiques :
        1. G√©n√®re 5 commentaires r√©alistes qui pourraient appara√Ætre sous cette vid√©o, en fran√ßais
        2. Pour chaque commentaire :
           - Cr√©e un nom d'utilisateur r√©aliste
           - Ajoute un nombre de likes plausible
           - √âvalue sa pertinence
        3. Formate la sortie en JSON avec cette structure :
           {{
             "topComments": [
               {{
                 "username": "nom_utilisateur",
                 "comment": "texte du commentaire",
                 "likes": nombre_de_likes,
                 "relevance": "score de pertinence sur 10"
               }}
             ],
             "analysisInsights": "aper√ßu global des r√©actions"
           }}

        Contenu de la vid√©o :
        {transcript_text}
        """

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "Tu es un expert en analyse de contenu social qui comprend les dynamiques des commentaires YouTube."},
                {"role": "user", "content": prompt}
            ],
            response_format={ "type": "json_object" }
        )
        
        return jsonify({
            "result": response.choices[0].message.content,
            "metadata": {
                "videoId": video_id,
                "language": target_lang,
                "generatedAt": datetime.now().isoformat()
            }
        })

    except Exception as e:
        logger.error(f"Erreur lors de l'analyse des commentaires: {str(e)}")
        return create_error_response(f"Erreur lors du traitement: {str(e)}", 500)

@app.route('/api/health', methods=['GET'])
def health_check():
    """Route de v√©rification de l'√©tat de l'API."""
    return jsonify({
        "status": "healthy",
        "version": "1.1.0",
        "timestamp": datetime.now().isoformat()
    })

if __name__ == '__main__':
    # V√©rification de la configuration
    if not os.getenv("OPENAI_API_KEY"):
        logger.error("La cl√© API OpenAI n'est pas configur√©e!")
        exit(1)

    # D√©marrage du serveur
    port = int(os.getenv("PORT", 5000))
    app.run(host='0.0.0.0', port=port, debug=os.getenv("FLASK_ENV") == "development")
